package jp.co.Blackjack.reserve;

import java.io.IOException;
import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import jp.co.Blackjack.management.GameManagement;
import jp.co.Blackjack.management.CardManagement;

@WebServlet("/PlayerAction")
public class PlayerActionServlet extends HttpServlet {
    private static final long serialVersionUID = 1L;

    protected void doPost(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {

        HttpSession session = request.getSession();
        GameManagement gameManagement = (GameManagement) session.getAttribute("gamemanagement");
        CardManagement cardManagement = (CardManagement) session.getAttribute("cardManagement");

        if (gameManagement == null || cardManagement == null) {
            response.sendRedirect("menu.jsp");
            return;
        }

        String action = request.getParameter("action");

        switch (action) {
            case "hit":
                handleHit(cardManagement);
                break;
            case "stand":
                handleStand(cardManagement, gameManagement);
                break;
            case "doubledown":
                handleDoubleDown(cardManagement, gameManagement);
                break;
            case "surrender":
                handleSurrender(gameManagement);
                break;
            default:
                // 無効なアクションの場合の処理
                request.setAttribute("error", "Invalid action");
        }

        // ゲーム状態の更新
        session.setAttribute("gamemanagement", gameManagement);
        session.setAttribute("cardManagement", cardManagement);

        // プレイヤーがバーストしたかチェック
        if (cardManagement.isPlayerBusted()) {
            gameManagement.playerLoses();
            request.setAttribute("result", "Player Busted!");
        }

        // BlackjackPlayScreen.jsp にフォワード
        request.getRequestDispatcher("BlackjackPlayScreen.jsp").forward(request, response);
    }

    private void handleHit(CardManagement cardManagement) {
        cardManagement.hitCards();
    }

    private void handleStand(CardManagement cardManagement, GameManagement gameManagement) {
        cardManagement.dealerPlay();
        determineWinner(cardManagement, gameManagement);
    }

    private void handleDoubleDown(CardManagement cardManagement, GameManagement gameManagement) {
        if (gameManagement.canDoubleDown()) {
            gameManagement.doubleDownBet();
            cardManagement.hitCards();
            cardManagement.dealerPlay();
            determineWinner(cardManagement, gameManagement);
        }
    }

    private void handleSurrender(GameManagement gameManagement) {
        gameManagement.surrender();
    }

    private void determineWinner(CardManagement cardManagement, GameManagement gameManagement) {
        int playerScore = cardManagement.getPlayerScore();
        int dealerScore = cardManagement.getDealerScore();

        if (dealerScore > 21 || playerScore > dealerScore) {
            gameManagement.playerWins();
        } else if (playerScore < dealerScore) {
            gameManagement.playerLoses();
        } else {
            gameManagement.push();
        }
    }

    protected void doGet(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        response.sendRedirect("menu.jsp");
    }
}