/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.82
 * Generated at: 2024-11-25 03:08:44 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import jp.co.Blackjack.management.*;
import jp.co.Blackjack.modl.*;

public final class ResultScreen_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_packages.add("jp.co.Blackjack.management");
    _jspx_imports_packages.add("jp.co.Blackjack.modl");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPではGET、POST、またはHEADのみが許可されます。 JasperはOPTIONSも許可しています。");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");

GameManagement gameManagement = (GameManagement) session.getAttribute("gamemanagement");
CardManagement cardManagement = (CardManagement) session.getAttribute("cardManagement");

if (gameManagement == null || cardManagement == null) {
	response.sendRedirect("GameStart");
	return;
}
//処理前のメダル
int beforMedal = gameManagement.getOwnMedal() + gameManagement.getBetMedal();

String resultMessage = "";
int resultNumber = cardManagement.determineWinner(cardManagement);
gameManagement.processGameResult(resultNumber);
if (resultNumber == 1) {
	resultMessage = "勝ち";
} else if (resultNumber == -1) {
	resultMessage = "負け";
} else {
	resultMessage = "引き分け";
}
//処理後のメダル
int afterMedal = gameManagement.getOwnMedal();

boolean canNexMinBet = gameManagement.canContinueWithMinBet();
session.setAttribute("gamemanagement", gameManagement);
session.setAttribute("cardManagement", cardManagement);

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html lang=\"ja\">\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<link rel=\"stylesheet\" href=\"CSS/style.css\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("<h1>ラウンド");
      out.print(gameManagement.getRound() );
      out.write(" 結果:");
      out.print(resultMessage);
      out.write("</h1>\r\n");
      out.write("<div class=\"frame\">\r\n");
      out.write("	<!--ディーラーの手札  -->\r\n");
      out.write("	ディーラの手札：　合計＝");
      out.print(cardManagement.calculateHandValue(cardManagement.getDealerHand()) );
      out.write("\r\n");
      out.write("	<table>\r\n");
      out.write("		<tr>\r\n");
      out.write("			");
for(Trump trumps:cardManagement.getDealerHand()){ 
      out.write("\r\n");
      out.write("			<td>");
      out.print(trumps );
      out.write("</td>\r\n");
      out.write("			");
} 
      out.write("\r\n");
      out.write("		</tr>\r\n");
      out.write("	</table>\r\n");
      out.write("\r\n");
      out.write("	<!--プレイヤーの手札  -->\r\n");
      out.write("	プレイヤーの手札：　合計＝");
      out.print(cardManagement.calculateHandValue(cardManagement.getPlayerHand()) );
      out.write("<br>\r\n");
      out.write("	<table>\r\n");
      out.write("		<tr>\r\n");
      out.write("		");
for(Trump trumps:cardManagement.getPlayerHand()){ 
      out.write("\r\n");
      out.write("			<td>");
      out.print(trumps );
      out.write("</td>\r\n");
      out.write("			");
} 
      out.write("\r\n");
      out.write("		</tr>\r\n");
      out.write("	</table>\r\n");
      out.write("	</div>\r\n");
      out.write("\r\n");
      out.write("	<h3>所持メダル：");
      out.print(beforMedal + "→" + afterMedal );
      out.write("</h3>\r\n");
      out.write("	<p>次ラウンドの最小Bet：");
      out.print(gameManagement.getMinBet() );
      out.write("</p>\r\n");
      out.write("	");
if(canNexMinBet){ 
      out.write("\r\n");
      out.write("		<form action=\"BetScreen.jsp\" method=\"post\">\r\n");
      out.write("			<input type=\"submit\" value=\"次のゲームへ\">\r\n");
      out.write("		</form>\r\n");
      out.write("	");
}else{ 
      out.write("\r\n");
      out.write("		<form action=\"RankingScreen.jsp\" method=\"post\">\r\n");
      out.write("			<input type=\"submit\" value=\"ランキング画面\">\r\n");
      out.write("		</form>\r\n");
      out.write("	");
} 
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
